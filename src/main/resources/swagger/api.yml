## API-first development with swagger
## This file will be used at compile time to generate Spring-MVC endpoint stubs using swagger-codegen
swagger: "2.0"

## specify the API info
info:
  ## API version, not file revision or Swagger version
  ## version can be a random string. You can use major.minor.patch (as in semantic versioning), or an arbitrary format like 1.0-beta or 2016.11.15
  version: 0.0.1
  title: "Kmall API"
  ## description can be multiline and supports GitHub Flavored Markdown for rich text representation.
  description: "created by kazeki"
  ## info also supports other fields for contact information, license and other details.
  ## see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#infoObject
  
## The base URL for all API calls is defined using schemes, host and basePath
## All API paths are relative to the base URL. For example, /users actually means https://api.example.com/v1/users.
## see https://swagger.io/docs/specification/2-0/api-host-and-base-path/
## host is the domain name or IP address (IPv4) of the host that serves the API. It may include the port number if different from the scheme’s default port (80 for HTTP and 443 for HTTPS). Note that this must be the host only, without http(s):// or sub-paths.
## If host is not specified, it is assumed to be the same host where the API documentation is being served.
# host: localhost:8080
## basePath is the URL prefix for all API paths, relative to the host root. It must start with a leading slash /. 
## If basePath is not specified, it defaults to /, that is, all paths start at the host root.
basePath: /v1
## schemes are the transfer protocols used by the API. 
## Swagger supports the http, https, and WebSocket schemes – ws and wss. 
## As with any lists in YAML, schemes can be specified using the list syntax or the array literal syntax
## If schemes are not specified, the scheme used to serve the API specification will be used for API calls.
#schemes:
#  - http
#  - https
## host and scheme can be omitted for a more dynamic association. 
## In this case, the host and scheme used to serve the API documentation will be used for API calls. 
## For example, if Swagger UI-based documentation is hosted at https://api.example.com/apidocs/index.html, “try it out” API calls will be directed to https://api.example.com.

## To specify the response media types, use the produces keyword on the root level or operation level.
##  The global list can be overridden on the operation level.
#produces:
#  - application/json

## Swagger supports path templating, meaning you can use curly braces {} to mark parts of a URL as path parameters:
## 
## /users/{id}
## /organizations/{orgId}/members/{memberId}
## /report.{format}  
## For each path, you define operations (HTTP methods) that can be used to access that path. 
## Swagger 2.0 supports get, post, put, patch, delete, head, and options.
paths: 
  /hello:
    get:
      operationId: sayHello
      deprecated: false #是否过时
      tags:
        - "hello swagger" 
      description: "hello world of jhipster"
      produces: 
        - "application/json"
      parameters: # 参数描述
        - in: query
          name: name
          type: string
          required: false
        - in: query
          name: role
          type: string
          enum: [user, poweruser, admin]
          required: false
      responses:
        200:
          description: "OK"
          schema: 
            $ref: "#Msg"
          headers:
            X-kheader:
              type: integer
              description: "test header"
            content-type:
              type: string
              description: "test header"
definitions:
  Msg:
    type: object
    properties:
      id:
        type: integer
        example: 123
      name:
        type: string
        example: kazeki
      role:
        type: string
        enum: [user, poweruser, admin]
        example: admin
    required:
      - id
      - name

